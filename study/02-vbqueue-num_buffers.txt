提交逻辑:
struct vb2_queue中的num_buffers赋值和struct vb2_buffer中的index的关系。

通过例子分析，在应用层两次调用ioctl的reqbuff，每次的count是4，num_buffers和index如何变化的。
vb2_core_create_bufs(struct vb2_queue *q，enum vb2_memory memory，unsigned int *count=4)
{
	allocated_buffers = __vb2_queue_alloc(q, memory, 4,num_planes, plane_sizes);
	
	在 __vb2_queue_alloc函数里:
	for (buffer = 0; buffer < num_buffers; ++buffer) {
		vb = kzalloc(q->buf_struct_size, GFP_KERNEL);
		vb->index = q->num_buffers (0)+ buffer; //vb->index就是,这个vb在q中的bufs的索引,这是vb->index是0-3
		q->bufs[vb->index] = vb; 
	}	
	q->num_buffers += allocated_buffers
	q->num_buffers = 4;
}
vb2_core_create_bufs(struct vb2_queue *q，enum vb2_memory memory，unsigned int *count=4)
{
	allocated_buffers = __vb2_queue_alloc(q, memory, 4,num_planes, plane_sizes);
	
	在 __vb2_queue_alloc函数里:
	for (buffer = 0; buffer < num_buffers; ++buffer) {
		vb = kzalloc(q->buf_struct_size, GFP_KERNEL);
		vb->index = q->num_buffers(4) + buffer; //vb->index就是,这个vb在q中的bufs的索引,这是vb->index是4-7
		q->bufs[vb->index] = vb; 
	}	
	q->num_buffers += allocated_buffers
	q->num_buffers = 8;
}
